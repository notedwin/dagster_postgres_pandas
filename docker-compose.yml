version: "3.7"

services:
  # This service runs the gRPC server that loads your user code, in both dagit
  # and dagster-daemon. By setting DAGSTER_CURRENT_IMAGE to its own image, we tell the
  # run launcher to use this same image when launching runs in a new container as well.
  # Multiple containers like this can be deployed separately - each just needs to run on
  # its own port, and have its own entry in the workspace.yaml file that's loaded by dagit.
  dagster_user_code:
    build:
      context: .
      dockerfile: ./code.dockerfile
    container_name: dagster_user_code
    image: dagster_user_code_image
    restart: always
    environment:
      DATABASE_URL: ${DATABASE_URL}
      DAGSTER_PG_USERNAME: ${DAGSTER_PG_USERNAME}
      DAGSTER_PG_PASSWORD: ${DAGSTER_PG_PASSWORD}
      DAGSTER_PG_HOST: ${DAGSTER_PG_HOST}
      DAGSTER_PG_DB: ${DAGSTER_PG_DB}
      DAGSTER_CURRENT_IMAGE: "dagster_user_code_image"
    env_file:
      - .env
    volumes:
      - ./data_cow:/data_cow
    networks:
      - bridge_dagster

  dagit:
    build:
      context: .
      dockerfile: ./dagster.dockerfile
    entrypoint:
      - dagit
      - -h
      - "0.0.0.0"
      - -p
      - "3000"
      - -w
      - workspace.yaml
    container_name: dagit
    ports:
      - "4000:3000"
    environment:
      DATABASE_URL: ${DATABASE_URL}
      DAGSTER_PG_USERNAME: ${DAGSTER_PG_USERNAME}
      DAGSTER_PG_PASSWORD: ${DAGSTER_PG_PASSWORD}
      DAGSTER_PG_HOST: ${DAGSTER_PG_HOST}
      DAGSTER_PG_DB: ${DAGSTER_PG_DB}
    env_file:
      - .env
    volumes: 
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - bridge_dagster
    depends_on:
      - dagster_user_code

  # This service runs the dagster-daemon process, which is responsible for taking runs
  # off of the queue and launching them, as well as creating runs from schedules or sensors.
  dagster_daemon:
    build:
      context: .
      dockerfile: ./dagster.dockerfile
    entrypoint:
      - dagster-daemon
      - run
    container_name: dagster_daemon
    restart: on-failure
    environment:
      DATABASE_URL: ${DATABASE_URL}
      DAGSTER_PG_USERNAME: ${DAGSTER_PG_USERNAME}
      DAGSTER_PG_PASSWORD: ${DAGSTER_PG_PASSWORD}
      DAGSTER_PG_HOST: ${DAGSTER_PG_HOST}
      DAGSTER_PG_DB: ${DAGSTER_PG_DB}
    env_file:
      - .env
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - bridge_dagster
    depends_on:
      - dagster_user_code

networks:
  bridge_dagster:
    driver: bridge
    name: bridge_dagster
